## Scaling and Resizing
import cv2
import numpy as np
import matplotlib.pyplot as plt



img = cv2.imread("mans.jpg")
img = cv2.cvtColor(img , cv2.COLOR_BGR2RGB)
sample_img = img[50:100,200:300]
plt.imshow(sample_img)
from skimage.transform import resize , rescale
import cv2
import matplotlib.pyplot as plt

img = cv2.imread("mans.jpg",cv2.IMREAD_GRAYSCALE)
image_rescaled_25 = rescale(img, 0.25)
image_rescaled_50 = rescale(img , 0.5)
image_rescaled_75 = rescale(img , 0.75)

plt.figure()
plt.imshow(image_rescaled_25,cmap="gray")
plt.show()
plt.imshow(image_rescaled_50,cmap="gray")
plt.show()
plt.imshow(image_rescaled_75,cmap="gray")
plt.show()

columns//5
from skimage.transform import resize , rescale
import cv2
import matplotlib.pyplot as plt

img = cv2.imread("mans.jpg",cv2.IMREAD_GRAYSCALE)

rows , columns = img.shape

image_resized = resize(img, (rows// 4, columns //6))
plt.imshow(image_resized,cmap='gray')
## Quantizing Image
bins = np.linspace(0, img.max(), 2**5)
digi_image1 = np.digitize(img, bins)
digi_image1 = (np.vectorize(bins.tolist().__getitem__)(digi_image1-1).astype(int))

# 16bit quantization
bins = np.linspace(0, img.max(), 2**4)
digi_image2 = np.digitize(img, bins)
digi_image2 = (np.vectorize(bins.tolist().__getitem__)(digi_image2-1).astype(int))

# 8bit quantization
bins = np.linspace(0, img.max(), 2**3)
digi_image3 = np.digitize(img, bins)
digi_image3 = (np.vectorize(bins.tolist().__getitem__)(digi_image3-1).astype(int))

# 4bit quantization
bins = np.linspace(0, img.max(), 2**2)
digi_image4 = np.digitize(img, bins)
digi_image4 = (np.vectorize(bins.tolist().__getitem__)(digi_image4-1).astype(int))

plt.subplot(2,2,1)
plt.imshow(digi_image1)
plt.subplot(2,2,2)
plt.imshow(digi_image2)
plt.subplot(2,2,3)
plt.imshow(digi_image3)
plt.subplot(2,2,4)
plt.imshow(digi_image4)
## Tanslating Image
import cv2
import numpy as np
import matplotlib.pyplot as plt
image = cv2.imread("mans.jpg")

image= cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
# Store height and width of the image
rows, columns = image.shape[:2]

quarter_rows, quarter_columns = rows // 4, columns // 4

T = np.float32([[1, 0, quarter_columns], [0, 1, quarter_rows]])

# We use warpAffine to transform
# the image using the matrix, T
img_translation = cv2.warpAffine(image, T, (columns, rows))

plt.imshow( image)
plt.show()
plt.imshow(img_translation)
plt.show()
image.shape
quarter_width
3376//4
